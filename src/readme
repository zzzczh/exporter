CBase其具体包含四类节点，分别是主控节点RS，请求代理节点MS，增量数据节点UPS以及静态数据节点CS，可以由MySQL客户端连接进CBase系统；下面详细介绍各个节点的功能：
1.RootServer（简称为RS），主控节点，它的功能作用有很多：
a. RS负责管理与维护数据库集群中的其它节点，集群中其它节点如果上线的话要向RS注册，并且通过心跳机制和租约机制来保持和其它节点的联系；RS知道其他所有节点的信息，管理其它节点的上下线。
b.CS向RS汇报自己的子表信息，RS保存基准数据服务器CS中所有用户的子表信息，查询的时候向RS获取子表位置信息，子表相关的还包括副本管理，为了高可用性跟高可靠性，也就是每个表可以配置多个副本，以及负载均衡[30]算法，多个CS上的子表数目大致相等，涉及到子表数据迁移复制删除。
c.为了集群高可用性，通常配置的是一个主RS，多个备RS，多个RS通过Raft [31]算法实现选举主RS，主RS会将数据同步到备RS，在主RS出现故障的时候，能够及时选出新的主RS来接管集群，这样大大提高了数据库集群的可用性。
d.实现UPS的选主功能，如果一台主UPS宕机之后，可以根据一定条件选出新的主UPS来对外提供服务。并且可以定期通知UPS和CS进行数据融合，将UPS上的增量数据融合到CS的基准数据中，形成新的基准数据。

2.UpdateServer（简称为UPS）：
增量更新节点，用来保存新修改的数据。UPS把数据保存在内存中，内存中有一张内存表，叫做MemTable，提供多个对外接口， Memtable内部本质是一棵高性能的B+树，B+树的内部节点是保存着表ID和行ID来作为内部索引，成为TEKEY，叶子节点是保存具体某一行的增量数据，称为TEVALUE，每一行增量数据是由链表的数据结构保存，链表里的一个Node节点保存着做一次事务操作写入的增量数据。
为了可靠性，配置通常配置一主UPS多个备UPS，当主UPS有写操作请求的时候，主UPS先写操作日志，然后将操作日志同步到备UPS中，成功后，当主UPS收到多数派(大于服务器数量的一半)备UPS写日志成功，主UPS就将数据写入到活跃的内存表中，当内存占用大于设置的阈值的时候，就会将数据保存到文件中，创建一个新的B+树提供服务。每个主UPS配置有多个备UPS，主备UPS之间的数据是通过Raft协议来确保强一致性的。集群可以根据需求配置一个Raft组或者多个Raft组，如图所示，每个Raft组都有三个UPS，一主两备的配置。
访问ups的请求会被分类为两类get和scan,其他节点同理.

3.ChunkServer（简称为CS）：
基准数据节点，用来保存集群中的基数据(即相对于增量数据之外的数据)。CS中的数据是以文件的形式保存在磁盘上，一张大表数据按照主键被切分为大小相等的文件，称作sstable。如果发生合并操作，CS融合UPS上的增量数据后，会创建一个新的sstable重新写入到磁盘中，旧版本的sstable删除掉。当有读取操作的时候，就会来到CS读取静态数据，然后CS去UPS拉取增量数据，融合之后返回给客户端。

4.MergeServer（简称为MS）：
请求代理节点，该节点用来处理客户端发来的SQL读写操作请求。MS在数据库集群中可以配置任意台，客户端与MS通信，当有一条SQL请求的时候，MS会对远程客户端发来的SQL消息做解析，其中需要做的是判断是不是跟SQL语法规则一样，写的对不对，然后生成逻辑计划，逻辑计划就是判断这条SQL要查的表是否存在，是否有权限这些检查，接着生成物理计划，物理计划就是将生成一个个物理操作符，最后打开物理计划，也即是利用这些物理算子执行具体操作。
查数据的时候，CS先去RS查看这些数据存储在哪些CS上。因为数据是有多份的，保存在多个CS节点上，所以MS会通过CS的流量配比选择一台CS发送请求，然后等待应答。为了减少MS与RS之间的通信，MS会在内存中保存一份子表位置信息，当需要查询某个数据表的时候，就可以查询MS内存中子表位置信息，如果没有，再去RS获取子表位置信息再保存下来。MS属于是无状态的节点，如果出现宕机的时候，CBase系统是不会受到影响，RS会将宕机MS置为下线，不提供服务就行了。